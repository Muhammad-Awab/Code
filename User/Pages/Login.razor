@page "/login"

@inject IJSRuntime js
@using ClassLibraryDAL
@using ClassLibraryEntities
@using User.Authentication

@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm

@if (check)
{
    <MessageComponent CustomMessage="@message"></MessageComponent>
}


<div class="section">
    <div class="container">
        <div class="row  justify-content-center">
            <div class="col-12 text-center align-self-center py-5">
                <div class="section pb-5 pt-5 pt-sm-2 text-center">
                    <h6 class="mb-0 pb-3"><span>Log In </span><span>Sign Up</span></h6>
                    <input class="checkbox" type="checkbox" id="reg-log" name="reg-log" />
                    <label for="reg-log"></label>
                    <div class="card-3d-wrap mx-auto">
                        <div class="card-3d-wrapper">
                            <div class="card-front">
                                <div class="center-wrap">
                                    <div class="section text-center">
                                        <h4 class="mb-4 pb-3">Log In</h4>
                                        <div class="form-group">
                                            <input @bind="User" type="text" name="logemail" class="form-style" placeholder="Your Email" id="logemail" autocomplete="off">
                                            <i class="input-icon uil uil-at"></i>
                                        </div>
                                        <div class="form-group mt-2">
                                            <input @bind="Password" type="password" name="logpass" class="form-style" placeholder="Your Password" id="logpass" autocomplete="off">
                                            <i class="input-icon uil uil-lock-alt"></i>
                                        </div>
                                        <button @onclick="Authenticate">Submit </button>
                                        <p class="mb-0 mt-4 text-center"><a href="#0" class="link">Forgot your password?</a></p>
                                    </div>
                                </div>
                            </div>
                            <div class="card-back">
                                <div class="center-wrap">
                                    <div class="section text-center">
                                        <h4 class="mb-4 pb-3">Sign Up</h4>
                                        <div class="form-group">
                                            <input @bind="_Model.Username" type="text" name="logname" class="form-style" placeholder="Your Full Name" id="logname" autocomplete="off">
                                            <i class="input-icon uil uil-user"></i>
                                        </div>
                                        <div class="form-group mt-2">
                                            <input @bind="_Model.Email" type="email" name="logemail" class="form-style" placeholder="Your Email" id="logemail" autocomplete="off">
                                            <i class="input-icon uil uil-at"></i>
                                        </div>
                                        <div class="form-group mt-2">
                                            <input @bind="_Model.Password" type="password" name="logpass" class="form-style" placeholder="Your Password" id="logpass" autocomplete="off">
                                            <i class="input-icon uil uil-lock-alt"></i>
                                        </div>
                                        <button @onclick="SignUp">Submit </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {




    private ClassLibraryEntities.EntUserlogin _Model { get; set; } = new ClassLibraryEntities.EntUserlogin();

    public string? User { get; set; }
    public string? Password { get; set; }
    public string? ID { get; set; }
    public string? Passwrd { get; set; }
    public string? EncPass { get; set; }
    public string? message { get; set; }
    bool check = false;

    public string DecodeFrom64(string encodedData)
    {
        System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
        System.Text.Decoder utf8Decode = encoder.GetDecoder();
        byte[] todecode_byte = Convert.FromBase64String(encodedData);
        int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
        char[] decoded_char = new char[charCount];
        utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
        string result = new String(decoded_char);
        return result;
    }


    private async Task Authenticate()
    {

        _Model = DALUserLogin.GetUserByName(User);
        _Model.Username = User;
        ID = _Model.UserId;
        Passwrd = DecodeFrom64(_Model.Password);



        if (_Model == null || Passwrd != Password)
        {

            check = true;
            message = "Invalid UserName and Password ! ";

        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserId = _Model.UserId,
                UserName = _Model.Username,
                Role = _Model.Role

            });

        nm.NavigateTo("/", true);
    }


    public static string EncodePasswordToBase64(string password)
    {
        try
        {
            byte[] encData_byte = new byte[password.Length];
            encData_byte = System.Text.Encoding.UTF8.GetBytes(password);
            string encodedData = Convert.ToBase64String(encData_byte);
            return encodedData;
        }
        catch (Exception ex)
        {
            throw new Exception("Error in base64Encode" + ex.Message);
        }
    }

    private void SignUp()
    {
        EncPass = EncodePasswordToBase64(Password);
        _Model.Password = EncPass;
        _Model.Role = "User";
        DALUserLogin.SaveSignUp(_Model);
        nm.NavigateTo("/");
    }


}