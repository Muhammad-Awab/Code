@page "/login"

@inject IJSRuntime js
@using ClassLibraryDAL
@using ClassLibraryEntities
@using User.Authentication

@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm

<div class=" d-flex justify-content-center center">
    <div class="card gap-3 Login-Card" style="width: 28rem;">
        <h3 class="text-center">Login</h3>

        <input @bind="User" placeholder="userName" />
        <input type="password" @bind="Password" placeholder="Password" />
        <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        @if (check)
        {
            <h6 class="text-danger text-center">@message </h6>
        }
    </div>
</div>
@code {




    private ClassLibraryEntities.EntUserlogin _Model { get; set; } = new ClassLibraryEntities.EntUserlogin();

    public string? User { get; set; }
    public string? Password { get; set; }
    public string? ID { get; set; }
    public string? Passwrd { get; set; }
    public string? EncPass { get; set; }
    public string? message { get; set; }
    bool check = false;

    public string DecodeFrom64(string encodedData)
    {
        System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
        System.Text.Decoder utf8Decode = encoder.GetDecoder();
        byte[] todecode_byte = Convert.FromBase64String(encodedData);
        int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
        char[] decoded_char = new char[charCount];
        utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
        string result = new String(decoded_char);
        return result;
    }


    private async Task Authenticate()
    {

        _Model = DALUserLogin.GetUserByName(User);
        _Model.Username = User;  //
        ID = _Model.UserId;
        Passwrd = DecodeFrom64(_Model.Password);



        if (_Model == null || Passwrd != Password)
        {

            check = true;
            message = "Invalid UserName and Password ! ";

        }
        else
        {

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserId = _Model.UserId,
                    UserName = _Model.Username,
                    Role = _Model.Role

                });

            nm.NavigateTo("/", true);
        }

    }







}