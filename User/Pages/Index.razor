@page "/"
@using ClassLibraryDAL
@using ClassLibraryEntities
@inject IJSRuntime js

@using User.Authentication
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm


<style>
    .color-d {
        background-color: #1a1a97c4;
    }

    .size {
        font-size: 1.5rem;
    }

    .font {
        font-size: 2.5rem;
    }

    .font1 {
        font-size: 2.5rem;
    }

    .text-sm .tooltip-inner {
        font-size: 0.5rem;
    }

    .label-properties {
        font-size: 1.5rem;
        color: black;
        font-weight: 600;
    }

    .carousel-item {
        height: 120vh;
        min-height: 400px;
        background: no-repeat center center;
        background-attachment:fixed;
       background-position:center;
        background-size: cover;
    }
</style>
@if (PassingDegreeList == null)
{
    <div class="container-fluid bg-3 mt-5">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="loader">
                      
                        <div class="loader-inner"></div>
                        <div class="loader-inner"></div>
                        <div class="loader-inner"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    


      
 
            <div class="carousel-inner">
                <div class="carousel-item active" style="background-image: url('Images/pic.jpg')">
                    <div class="text-center">
                        <h1 class="text-black mt-4 mb-4 font1 fw-bold">Careers that matter</h1>
                        <h4 class="text-black display-1 mb-2 font">Lets build your career with <span></span></h4>
                        <img src="Images/img.png" height="80">
                    </div>
                    <div class="mb-5 mt-3">
                        <div class="container">
                            <div class="row">
                                <div class="col-md-6 mt-3">

                                    <label for="exampleFormControlInput1" class="form-label label-properties">Select Program Degree</label>
                                    <select class="form-select text-black size"
                                        @onchange="_DegOption" required>
                                        <option value="-1" selected>Select Program Degrees</option>

                                        @foreach (var emp in @PassingDegreeList)
                                        {
                                            <option value="@emp.PassingDegreesId">@emp.Title</option>
                                        }
                                    </select>

                                </div>
                                <div class="col-md-6 mt-3">
                                    <label for="exampleFormControlInput1" class="form-label label-properties">Select Passing Groups</label>
                                    <select @bind="@PassingDegreeSGid" class="form-select text-black size" aria-label="Default select example">
                                        <option value="-1" selected>Select Passing Groups</option>

                                        @foreach (var emp in @PassingDSGroupsList)
                                        {
                                            if (alpha == emp.PassingDegreeId)
                                            {
                                                <option value="@emp.PassingDSGroupsId">@emp.PassingDSGroups</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6 mt-3">
                                    <label for="exampleFormControlInput1" class="form-label label-properties">Select percentage</label>
                                    <select @bind="@perc" class="form-select text-black size" aria-label="Default select example" required>
                                        <option value="-1" selected>Select Percentage</option>
                                        <option value="50">40-45 %</option>
                                        <option value="50">45-50 %</option>
                                        <option value="50">50-55 %</option>
                                        <option value="60">55-60 %</option>
                                        <option value="60">60-65 %</option>
                                        <option value="60">65-70 %</option>


                                    </select>
                                </div>
                                <div class="col-md-6 mt-3">
                                    <label for="exampleFormControlInput1" class="form-label label-properties">Select City</label>
                                    <select @bind="cityID" class="form-select size" aria-label="Default select example" required>
                                        <option value="-1">Select City</option>

                                        @foreach (var emp in @CitiesList)
                                        {

                                            <option value="@emp.CityId">@emp.CityName</option>

                                        }
                                    </select>
                                </div>
                                <div style="font-size: 1rem;margin-top: 1.7rem; text-align-center">

                                    <button type="submit" class="btn btn-primary text-white" style="font-size: 22px;" @onclick="Submit">Search</button>
                                </div>

                            </div>
                        </div>



                    </div>
                </div>
        </div>
   
       




}
<div class="container">


    @if (check)
    {
        <div class="container-fluid mt-5">
            <div class="row">
                @foreach (var emp in FilterCitiesList)
                {
                    <div class="col-md-3 mt-4">
                        <div class="card text-dark bg-light shadow mb-3" style="max-width: 18rem;">

                            <div class="card-body">
                                <div class="h4">@emp.Title</div>
                                <h6 class="card-subtitle mb-2">You are eligible in <b>@emp.Departments </b> Departments</h6>

                                <button class="btn btn-primary mt-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" @onclick="e=>DepartmentsDetails(emp.InstituteId,emp.Title)">View Details</button>

                            </div>
                        </div>
                    </div>

                }

            </div>
        </div>
    }
</div>
<div class="offcanvas offcanvas-end w-100 canvas-color" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
    <div class="offcanvas-header">
        <h2 id="offcanvasRightLabel" class="text-black">@Title</h2>
        <button type="button" class="btn-close text-reset " style="Color:White;" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        @if (check1)
        {
            <ViewDetails FilterDepartmentList="FilterDepartmentList"></ViewDetails>

        }

    </div>
</div>

@if (checck)
{
    <MessageComponent CustomMessage="@Message"></MessageComponent>
}




@*// <Search FilterCitiesList="@FilterCitiesList" />*@


@code {
    public string? value1 { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticatestate { get; set; }
    public bool isloading { get; set; } = false;
    private List<EntPassingDegree>? PassingDegreeList;
    private List<EntPassingDSGroups>? PassingDSGroupsList;
    private List<EntCities>? CitiesList;
    private List<EntFilter> FilterCitiesList;
    private List<EntProgramDegreeDetails>? FilterDepartmentList { get; set; }
    public string? Title { get; set; }
    public string? alpha { get; set; }
    private string? PassingDegreeSGid { get; set; }
    public string? cityID { get; set; }
    public bool check { get; set; } = false;
    public bool chek = false;
    public bool check1 = false;
    public bool checck = false;

    public string? perc { get; set; }
    public string? Message { get; set; }


    private EntFilter? _ModelFilter { get; set; } = new EntFilter();


    //public static List<EntFilter> FilterList(List<EntFilter>FilterCitiesList)
    //{

    //    return FilterCitiesList;
    //}




    private void LoadProgramDetails()
    {
        System.Threading.Thread.Sleep(2000);
        this.PassingDegreeList = DALPassingDegree.GetPassingDegrees();
        this.PassingDSGroupsList = DALPassingDSGroups.GetPassingDSGroups();
        this.CitiesList = DalCities.GetCities();
    }
    protected override async Task OnInitializedAsync()
    {
        isloading = true;
        await Task.Run(LoadProgramDetails);


    }

    private void _DegOption(ChangeEventArgs e)
    {
        alpha = e.Value as string;

    }
    private void Submit()
    {
        if (PassingDegreeSGid != "-1" && !string.IsNullOrEmpty(PassingDegreeSGid as string) || cityID != "-1" && !string.IsNullOrEmpty(cityID as string) || perc != "-1" && !string.IsNullOrEmpty(perc as string))
        {
            FilterCitiesList = DalFilter.GetDepartmentsbyID(PassingDegreeSGid, cityID, perc);
            //  StateHasChanged();
            //  chek = true;
            // FilterList(FilterCitiesList);
            check = false;
            nm.NavigateTo($"search/{PassingDegreeSGid}/{cityID}/{perc}");


        }
        else
        {
            Alert();

        }

    }
    private async Task Alert()
    {
        await js.InvokeVoidAsync("alert", "Please select all values");
    }
    private void DepartmentsDetails(string iid, string title)
    {
        // DisplayGreeting();
        //if (value1 != null && value1 != "")
        // {
        Title = title;
        FilterDepartmentList = DalFilter.GetDepartmentDetailsbyID(PassingDegreeSGid, iid);
        check1 = true;
        //}
        //else
        //{
        //   nm.NavigateTo("/login");




        //}
    }

    private async Task DisplayGreeting()
    {
        var authState = await authenticatestate;
        value1 = $"{authState.User.Identity.Name}";

    }

}