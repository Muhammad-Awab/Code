@page "/programdegreedetails"
@attribute [Authorize(Roles = "University")]
@inject NavigationManager nm
@using ClassLibraryDAL
@inject AuthenticationStateProvider authStateProvider
@using University.Authentication
@inject IJSRuntime js


@using ClassLibraryEntities
<h3>ProgramDegreeDetail </h3>
<h3>@value1</h3>

<EditForm Model="_ModelProgramDegreeDetail" OnSubmit="SubmintForm">
    <div class="row">
        <div class="col">
            <select class="form-select" aria-label="Default select example" @onchange="_CatOption">
                <option selected>Select Category</option>

                @foreach (var emp in @ProgramCategoriesList)
                {
                    <option value="@emp.ProgramCategoryId">@emp.CategoryName</option>
                }
            </select>


        </div>
        <div class="col">
            <select @bind="@DegreeId" class="form-select" aria-label="Default select example">
                <option selected>Select Category</option>

                @foreach (var emp in @ProgramDegreeList)
                {
                    if (alpha == emp.ProgramCategoryid)
                    {
                        <option value="@emp.ProgramDegreeId">@emp.DegreeName</option>
                    }
                }
            </select>
        </div>
        <div class="col">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>



<div class="container-fluid mt-5">
    <div class="row">

        @foreach (var emp in @ProgramDegreeDetailsList)
        {<div class="col-3  mt-4" >
            <div class="card text-white bg-success mb-3" style="max-width: 18rem;">
    <div class="card-header">@emp.ProgramDegreeId</div>
    <div class="card-body">
           <h5>Duration : <span class="text-info">@emp.Duration </span></h5>
           <h5>TotalSem : <span class="text-info">@emp.TotalSemesters </span></h5>
           <h5>Matric : <span class="text-info">@emp.Matric </span></h5>
           <h5>Interm : <span class="text-info">@emp.FSC </span></h5>
           <h5>Bachlor : <span class="text-info">@emp.BS </span></h5>
           <h5>TotalFee : <span class="text-info">@emp.TotalFee </span></h5>
           <h5>SemFee : <span class="text-info">@emp.SemesterFee </span></h5>
           <h5>ClosingMerit : <span class="text-info">@emp.ClosingMerit </span></h5>
           <h5>HEC,PEC : <span class="text-info">@emp.ApprovedById </span></h5>
           <h5>Duration : <span class="text-info">@emp.Duration </span></h5>
           <h5>Morning : <span class="text-info">@emp.Morning </span></h5>
           <h5>Evening : <span class="text-info">@emp.Evening </span></h5>
           <h5>Weekened : <span class="text-info">@emp.Weekened</span></h5>
           <h5>PassingGroups : <span class="text-info">@emp.PassingDegreeGroups </span></h5>
           
            <button @onclick="(e => OnDelete(emp.ProgramDegreeDetailsId))" class="btn btn-info">Delete</button>
            <select class="form-select" aria-label="Default select example" @onchange="_EditOption">
                <option selected>Edit</option>
                <option value="duration/@emp.ProgramDegreeDetailsId">Duration</option>
                <option value="totalsemesters/@emp.ProgramDegreeDetailsId">TotalSemester</option>
                <option value="eligibility/@emp.ProgramDegreeDetailsId">Eligibility Criteria</option>
                <option value="feedetails/@emp.ProgramDegreeDetailsId">Fees</option>
                <option value="shifts/@emp.ProgramDegreeDetailsId">Shift</option>
                <option value="closingmerit/@emp.ProgramDegreeDetailsId">ClosingMerit</option>
                <option value="approvedby/@emp.ProgramDegreeDetailsId">AprovedID</option>
                <option value="passinggroups/@emp.ProgramDegreeDetailsId">ProgramDegreeGroups</option>
            </select>
            </div>
</div>
</div>

        }
           
        
    </div>
</div>



@code {
    private ClassLibraryEntities.EntInstitutes? _Model { get; set; }
    private List<EntInstitutes>? ProgramUserAccount { get; set; }
    public string message { get; set; }
    public string? value1 { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticatestate { get; set; }
    private async Task DisplayGreeting()
    {
        var authState = await authenticatestate;
        value1 = $"{authState.User.Identity.Name}";

    }
    private List<EntProgramDegreeDetails>? ProgramDegreeDetailsList { get; set; }
    private List<EntProgramCategory>? ProgramCategoriesList;
    private List<EntProgramDegree>? ProgramDegreeList;
    private EntProgramDegreeDetails? _ModelProgramDegreeDetail { get; set; }
    private string? alpha { get; set; }
    private string? DegreeId { get; set; }
    private string? EditOption { get; set; }





    protected async override void OnInitialized()
    {
        DisplayGreeting();
        _ModelProgramDegreeDetail = new EntProgramDegreeDetails();
        LoadProgramDetails();
        LaodProgramDegreeDetails();
        SubmintForm();
    }

    private void OnDelete(string id)
    {

        DALProgramDegreeDetails.DeleteProgramDegreeDetails(id);
        LaodProgramDegreeDetails();

    }

    private async void LaodProgramDegreeDetails()
    {

        if (value1 != null)
        {

            this.ProgramDegreeDetailsList = DALProgramDegreeDetails.GetProgramDegreeDetailsByInstituteId(value1);

        }

    }
    private void _CatOption(ChangeEventArgs e)
    {
        alpha = e.Value as string;

    }
    private void _EditOption(ChangeEventArgs e)
    {
        EditOption = e.Value as string;
        Redirect(EditOption);
    }
    private void SubmintForm()
    {
        if (value1 != null)
        {
            _ModelProgramDegreeDetail.InstituteId = value1;
            _ModelProgramDegreeDetail.ProgramDegreeId = DegreeId;
            DALProgramDegreeDetails.SaveProgramDegreeDetails(_ModelProgramDegreeDetail);
            LaodProgramDegreeDetails();
        }



    }
    private void LoadProgramDetails()
    {
        this.ProgramCategoriesList = DALProgramCategory.GetProgramCategory();
        this.ProgramDegreeList = DALProgramDegree.GetProgramDegree();
    }


    private void Redirect(string url)
    {
        nm.NavigateTo(url);
    }



 }