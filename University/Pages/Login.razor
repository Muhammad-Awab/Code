@page "/login"

@using ClassLibraryDAL
@using University.Authentication

@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm


<h3>login</h3>

<div>
    <input  @bind="User" placeholder="userName" />
    <input type="password" @bind="Password" placeholder="Password" />
    <button @onclick="Authenticate" class="btn btn-primary">Login</button>
</div>

@code {

    private ClassLibraryEntities.EntInstitutes? _Model { get; set; }

    public string? User { get; set; }
    public string? Password { get; set; }
    public string? ID { get; set; }
    public string? DecPassword { get; set; }


    private async Task Authenticate()
    {
        
        _Model = DALUserAcountService.GetUserByName(User);
        _Model.UserName = User;
        ID = _Model.InstituteId;
        DecPassword = DecodeFrom64(_Model.Password);
        _Model.Password = DecPassword;




        if (_Model == null || _Model.Password != Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid userName");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                InstituteId = _Model.InstituteId,
                UserName = _Model.UserName,
                Role = _Model.Role

            });

        nm.NavigateTo("/", true);
    }


    public string DecodeFrom64(string encodedData)
    {
        System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
        System.Text.Decoder utf8Decode = encoder.GetDecoder();
        byte[] todecode_byte = Convert.FromBase64String(encodedData);
        int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
        char[] decoded_char = new char[charCount];
        utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
        string result = new String(decoded_char);
        return result;
    }

}
