@page "/programdegree/{CategoryID}"
@using ClassLibraryDAL
@using ClassLibraryEntities
@inject NavigationManager nm

<div><h3>Program Degrees</h3></div>
<div>
    <EditForm Model="_ModelProgramDegree" OnSubmit="SubmintForm">
        <table>
            <tr>

                <td>

                    <InputText PlaceHolder="DID" name="ID" @bind-Value="_ModelProgramDegree.ProgramDegreeId" disabled></InputText>
                </td>


                <td>
                    <InputText PlaceHolder="PCategoryID" name="Name" @bind-Value="_ModelProgramDegree.ProgramCategoryid" disabled></InputText>
                </td>
                <td>


                    <InputText PlaceHolder="DegreeName" name="Name" @bind-Value="_ModelProgramDegree.DegreeName" required ></InputText>
                </td>


                <td>
                    <button type="submit" class="btn btn-primary">@ButtonName</button>
                </td>
            </tr>


        </table>


    </EditForm>
</div>

<table class="table table-striped">
    <tr>
        <th>ID</th>
         <th>Category ID</th>
        <th>Degree Name</th>
       
    </tr>

    @foreach (var emp in @ProgramDegreeList)
    {
        if (CategoryID == emp.ProgramCategoryid)
        {
            <tr>
                <td>
                    @emp.ProgramDegreeId
                </td>
                
                <td>@emp.ProgramCategoryid</td>
                <td>@emp.DegreeName</td>
                <td>


                    <button @onclick="(e => OnDelete(emp.ProgramDegreeId))" class="btn btn-warning bt-sm">Del</button>
                    <button @onclick="(e=>EditDegree(emp.ProgramCategoryid,emp.DegreeName,emp.ProgramDegreeId))" class="btn btn-warning bt-sm">Edit</button>


                </td>
            </tr>
        }
    }



</table>


@code {

    private List<EntProgramDegree>? ProgramDegreeList;
    [Parameter] public string? CategoryID { get; set; }
    private EntProgramDegree? _ModelProgramDegree { get; set; }
    private string? ButtonName { get; set; }
    protected override void OnInitialized()
    {
        _ModelProgramDegree = new EntProgramDegree();
        LaodEmployee();

    }
    private void LaodEmployee()
    {
        this.ProgramDegreeList = DALProgramDegree.GetProgramDegree();
        ButtonName = "Save";
    }
    private void SubmintForm()
    {
        if (ButtonName == "Save")
        {
            if (_ModelProgramDegree.DegreeName != null && _ModelProgramDegree.DegreeName!="")
            {
                _ModelProgramDegree.ProgramCategoryid = CategoryID;
                DALProgramDegree.SaveProgramDegree(_ModelProgramDegree);
                _ModelProgramDegree = new EntProgramDegree();
                LaodEmployee();
            }
            else
            {

            }

        }
        else
        {
            if (_ModelProgramDegree.DegreeName != null && _ModelProgramDegree.DegreeName!="")
            {
                DALProgramDegree.UpdateProgramDegree(_ModelProgramDegree);
                _ModelProgramDegree = new EntProgramDegree();
                LaodEmployee();
            }
            else
            {
                
            }


        }

    }

    private void EditDegree(string id, string degreename,string pid)
    {

        _ModelProgramDegree.DegreeName = degreename;
        _ModelProgramDegree.ProgramCategoryid = id;
        _ModelProgramDegree.ProgramDegreeId = pid;
        ButtonName = "Update";
    }
    private void OnDelete(string id)
    {
        DALProgramDegree.DeleteProgramDegree(id);
        LaodEmployee();

    }

















}
